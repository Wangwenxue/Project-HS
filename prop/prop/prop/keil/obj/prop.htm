<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\prop.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\prop.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Thu Aug 04 17:00:49 2016
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SPI0_IRQHandler &rArr; spi_int_enable &rArr; spi_tx_data &rArr; spi_spi_SetTXD
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[11]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ACMP0_IRQHandler</a> from analog.o(i.ACMP0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[c]">ACMP1_IRQHandler</a> from analog.o(i.ACMP1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[11]">ADC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">BLE_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">CALIB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIO_IRQHandler</a> from gpio.o(i.GPIO_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">I2C_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">OSC_EN_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">PWM0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">PWM1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">RTC_CAP_IRQHandler</a> from rtc.o(i.RTC_CAP_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from spi.o(i.SPI0_IRQHandler) referenced 2 times from startup.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup.o(.text) referenced 2 times from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from timer.o(i.TIMER2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1d]">TIMER3_IRQHandler</a> from timer.o(i.TIMER3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[22]">TUNER_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">TUNER_SETTING_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">TUNER_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">UART0_RX_IRQHandler</a> from uart.o(i.UART0_RX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART0_TX_IRQHandler</a> from uart.o(i.UART0_TX_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[17]">UART1_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">UART1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">WDT_IRQHandler</a> from wdt.o(i.WDT_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[27]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[25]">main</a> from prop_example.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[80]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[81]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[82]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[83]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[84]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CALIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>OSC_EN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TUNER_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TUNER_SETTING_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TUNER_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>__aeabi_lmul</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_uldivmod</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2d]"></a>localtime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_parse
</UL>

<P><STRONG><a name="[2e]"></a>_localtime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__rd_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_GetIntStatus
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ref_pll_calibration
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetRXD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetICER
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetCCR
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetSR
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetRXD
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_enable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_get
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_GetReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_GetIntStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>

<P><STRONG><a name="[3c]"></a>__wr_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetSRC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetDST
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetTXD
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_ClrSR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetReg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_ClrIntStatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_irq_clear
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_wdt_SetLKR
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[31]"></a>__wr_reg_with_msk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math.o(REG_ACCESS_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetCRWithMask
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_freq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_prop_SetCrWithMask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
</UL>

<P><STRONG><a name="[b]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, analog.o(i.ACMP0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, analog.o(i.ACMP1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CRC16</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, crc.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>GPIO_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gpio.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_CAP_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc.o(i.RTC_CAP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_CAP_IRQHandler &rArr; rtc_rtc_ClrSR
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_ClrSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTC_IRQHandler &rArr; rtc_time_get &rArr; rtc_time_parse &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_get
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_ClrSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, spi.o(i.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI0_IRQHandler &rArr; spi_int_enable &rArr; spi_tx_data &rArr; spi_spi_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_data
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetTXD
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetSR
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetRXD
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SystemInit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, system.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemInit &rArr; syscon_set_sysclk_src &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ref_pll_calibration
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER0_IRQHandler &rArr; timer_timer_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetICER
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; timer_timer_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetCCR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; timer_timer_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetICER
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER3_IRQHandler &rArr; timer_timer_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetCCR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, uart.o(i.UART0_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_RX_IRQHandler &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetRXD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart.o(i.UART0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_TX_IRQHandler &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UartPutc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(i.UartPutc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartPutc &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e]"></a>WDT_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wdt.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WDT_IRQHandler &rArr; wdt_irq_clear &rArr; wdt_unlock &rArr; wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_irq_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8c]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[6f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3f]"></a>calibration_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, calibration.o(i.calibration_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calibration_init &rArr; cal_cal_SetCAL0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[62]"></a>dma_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_init &rArr; syscon_SetCRSC
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_GetIntStatus
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_init
</UL>

<P><STRONG><a name="[64]"></a>dma_rx</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dma.o(i.dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dma_rx &rArr; dma_dma_SetSRC
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetSRC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetDST
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetCRWithMask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_prevent_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
</UL>

<P><STRONG><a name="[27]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; UartPutc &rArr; uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[69]"></a>gpio_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, prop_example.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; prop_mode_rx &rArr; dma_rx &rArr; dma_dma_SetSRC
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6e]"></a>prop_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, proprietary.o(i.prop_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prop_init &rArr; dma_init &rArr; syscon_SetCRSC
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_prop_SetCrWithMask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_ctrl_reset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>prop_mode_rx</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, proprietary.o(i.prop_mode_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prop_mode_rx &rArr; dma_rx &rArr; dma_dma_SetSRC
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_freq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_ctrl_reset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_GetReg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_GetIntStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_ClrIntStatus
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>ref_pll_calibration</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, calibration.o(i.ref_pll_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ref_pll_calibration &rArr; cal_cal_SetCAL0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[34]"></a>rtc_time_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtc.o(i.rtc_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rtc_time_get &rArr; rtc_time_parse &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>syscon_set_ahb_clk</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_ahb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = syscon_set_ahb_clk &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[45]"></a>syscon_set_apb_clk</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_apb_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = syscon_set_apb_clk &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[46]"></a>syscon_set_ble_clk</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_ble_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = syscon_set_ble_clk &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3e]"></a>syscon_set_sysclk_src</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, syscon.o(i.syscon_set_sysclk_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = syscon_set_sysclk_src &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[47]"></a>syscon_set_timer_clk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_timer_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = syscon_set_timer_clk &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[48]"></a>syscon_set_usart_clk</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, syscon.o(i.syscon_set_usart_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = syscon_set_usart_clk &rArr; syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6b]"></a>uart_init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_init &rArr; syscon_SetCRSC
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>wdt_irq_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wdt.o(i.wdt_irq_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wdt_irq_clear &rArr; wdt_unlock &rArr; wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_unlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3b]"></a>SystemIOCfg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, system.o(i.SystemIOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemIOCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[42]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[43]"></a>syscon_SetCRSS</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, system.o(i.syscon_SetCRSS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscon_SetCRSS
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[41]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[65]"></a>dev_prevent_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(i.dev_prevent_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
</UL>

<P><STRONG><a name="[5d]"></a>dma_dma_GetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma.o(i.dma_dma_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_dma_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[5f]"></a>dma_dma_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dma.o(i.dma_dma_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_dma_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
</UL>

<P><STRONG><a name="[60]"></a>dma_dma_SetDST</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dma.o(i.dma_dma_SetDST))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_dma_SetDST
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
</UL>

<P><STRONG><a name="[61]"></a>dma_dma_SetSRC</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dma.o(i.dma_dma_SetSRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_dma_SetSRC
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
</UL>

<P><STRONG><a name="[63]"></a>syscon_SetCRSC</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dma.o(i.syscon_SetCRSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscon_SetCRSC
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[33]"></a>rtc_rtc_ClrSR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtc.o(i.rtc_rtc_ClrSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_rtc_ClrSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CAP_IRQHandler
</UL>

<P><STRONG><a name="[32]"></a>rtc_rtc_GetSR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(i.rtc_rtc_GetSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_rtc_GetSR
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CAP_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>rtc_time_parse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtc.o(i.rtc_time_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rtc_time_parse &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_get
</UL>

<P><STRONG><a name="[76]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_data
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_data
</UL>

<P><STRONG><a name="[36]"></a>spi_int_enable</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, spi.o(i.spi_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spi_int_enable &rArr; spi_tx_data &rArr; spi_spi_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_data
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetTXD
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetSR
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>spi_rx_data</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, spi.o(i.spi_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_rx_data &rArr; spi_spi_GetRXD
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_GetRXD
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>spi_spi_GetRXD</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(i.spi_spi_GetRXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_spi_GetRXD
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rx_data
</UL>

<P><STRONG><a name="[38]"></a>spi_spi_GetSR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(i.spi_spi_GetSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_spi_GetSR
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_enable
</UL>

<P><STRONG><a name="[3a]"></a>spi_spi_SetTXD</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi.o(i.spi_spi_SetTXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_spi_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tx_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_enable
</UL>

<P><STRONG><a name="[39]"></a>spi_tx_data</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(i.spi_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_tx_data &rArr; spi_spi_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_spi_SetTXD
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_enable
</UL>

<P><STRONG><a name="[77]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, syscon.o(i.syscon_SetCMDCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[79]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, syscon.o(i.syscon_SetPGCR1WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
</UL>

<P><STRONG><a name="[4a]"></a>timer_timer_ClrIntFlag</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(i.timer_timer_ClrIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_timer_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>timer_timer_GetCCR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.timer_timer_GetCCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timer_GetCCR
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>timer_timer_GetICER</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.timer_timer_GetICER))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timer_GetICER
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>timer_timer_GetIntFlag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.timer_timer_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timer_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[78]"></a>syscon_SetCRSC</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart.o(i.syscon_SetCRSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscon_SetCRSC
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[50]"></a>uart_rx_int_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.uart_rx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>uart_tx_int_enable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart.o(i.uart_tx_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>uart_uart_ClrIntFlag</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uart.o(i.uart_uart_ClrIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_uart_ClrIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>uart_uart_GetIntFlag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(i.uart_uart_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>uart_uart_GetRXD</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(i.uart_uart_GetRXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_GetRXD
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>uart_uart_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.uart_uart_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
</UL>

<P><STRONG><a name="[51]"></a>uart_uart_SetTXD</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart.o(i.uart_uart_SetTXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_uart_SetTXD
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>wdt_lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wdt.o(i.wdt_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wdt_lock &rArr; wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_wdt_SetLKR
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_irq_clear
</UL>

<P><STRONG><a name="[7c]"></a>wdt_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wdt.o(i.wdt_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wdt_unlock &rArr; wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_wdt_SetLKR
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_irq_clear
</UL>

<P><STRONG><a name="[7e]"></a>wdt_wdt_SetLKR</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wdt.o(i.wdt_wdt_SetLKR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_wdt_SetLKR
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_unlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_lock
</UL>

<P><STRONG><a name="[6c]"></a>uart_uart_GetIntFlag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, prop_example.o(i.uart_uart_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>uart_uart_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, prop_example.o(i.uart_uart_SetCRWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proprietary.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
</UL>

<P><STRONG><a name="[5c]"></a>dma_dma_ClrIntStatus</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, proprietary.o(i.dma_dma_ClrIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_dma_ClrIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
</UL>

<P><STRONG><a name="[5e]"></a>dma_dma_GetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, proprietary.o(i.dma_dma_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_dma_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
</UL>

<P><STRONG><a name="[66]"></a>dp_dp_GetReg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, proprietary.o(i.dp_dp_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dp_dp_GetReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
</UL>

<P><STRONG><a name="[67]"></a>dp_dp_SetReg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, proprietary.o(i.dp_dp_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dp_dp_SetReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_init
</UL>

<P><STRONG><a name="[68]"></a>dp_dp_SetRegWithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, proprietary.o(i.dp_dp_SetRegWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
</UL>

<P><STRONG><a name="[71]"></a>prop_ctrl_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, proprietary.o(i.prop_ctrl_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prop_ctrl_reset &rArr; prop_prop_SetCrWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_prop_SetCrWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_init
</UL>

<P><STRONG><a name="[72]"></a>prop_prop_SetCrWithMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, proprietary.o(i.prop_prop_SetCrWithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prop_prop_SetCrWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_ctrl_reset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_init
</UL>

<P><STRONG><a name="[73]"></a>rf_set_freq</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, proprietary.o(i.rf_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_set_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prop_mode_rx
</UL>

<P><STRONG><a name="[5a]"></a>cal_cal_SetCAL0WithMask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, calibration.o(i.cal_cal_SetCAL0WithMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wr_reg_with_msk
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ref_pll_calibration
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
</UL>

<P><STRONG><a name="[56]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[58]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
